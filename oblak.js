'use strict';

// debug heper for MaxEventLiteners
const { EventEmitter } = require('events');

const originalAddListener = EventEmitter.prototype.addListener;
const addListener = function addListener(...params) {
	originalAddListener.apply(this, params);
	const [type] = params;
	const numListeners = this.listeners(type).length;
	const max = typeof this._maxListeners === 'number' ? this._maxListeners : 10;
	/*
	if (max !== 0 && numListeners > max)
		throw new Error(
			`Too many listeners of type "${
				type
			}" added to EventEmitter. Max is ${
				max
			} and we've added ${
				numListeners
			}.`,
		);
	*/
	return this;
};
EventEmitter.prototype.addListener = addListener;
EventEmitter.prototype.on = addListener;
// debug heper for MaxEventLiteners

/**
 * Generated by Oblak CLI
 */

const Oblak = require('oblak');

const oblakData = require('./plugins/oblak-data');

process.on('uncaughtException', (e) => {
	throw e;
});

process.on('unhandledRejection', (e) => {
	throw e;
});

// oblak boot  strap
const oblak = Oblak.debug();

oblakData(oblak);

module.exports = oblak;
// not needed with new oblak.
// oblak.init();
// Oblak.debug().clear();
